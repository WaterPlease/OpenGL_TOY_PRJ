#version 430 core

#define EPS (1.0/1533)

layout (quads, equal_spacing, ccw) in;

uniform sampler2D texture_height;

uniform mat4 view;
uniform mat4 projection;
uniform float max_height;
uniform int numAxisPatches;
uniform float patchSize;
uniform float landSize;
uniform mat4 lightSpaceMat;


out FGINFO
{
    vec2 uv;
    mat3 TBN;
    vec3 pos;
    vec4 lightSpacePos;
}fginfo;

vec2 getUV(vec3 pos,float minVal,float maxVal){
    float LandAxisLen = maxVal-minVal;
    float u = (pos.x-minVal)/LandAxisLen;
    float v = (pos.z-minVal)/LandAxisLen;
    float t = (pos.y)/LandAxisLen;
    return vec2(u+t/128,v+t/128);
}

float getHeight(vec2 uv){
    return max_height * (texture(texture_height,uv).x * 0.25
                        
                        +(texture(texture_height,uv-vec2(-EPS,EPS)).x
                        +texture(texture_height,uv+vec2(-EPS,EPS)).x
                        +texture(texture_height,uv-vec2(EPS,EPS)).x
                        +texture(texture_height,uv+vec2(EPS,EPS)).x) * 0.0625

                        +(texture(texture_height,uv-vec2(EPS,0.0)).x
                        +texture(texture_height,uv+vec2(EPS,0.0)).x
                        +texture(texture_height,uv-vec2(0.0,EPS)).x
                        +texture(texture_height,uv+vec2(0.0,EPS)).x) * 0.125 );
}

void main(void){
    float minVal = -0.5*landSize;
    float maxVal = 0.5*landSize;

    vec4 _v0 = mix( gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
    vec4 _v1 = mix( gl_in[3].gl_Position, gl_in[2].gl_Position, gl_TessCoord.x);
    vec4 tessPos =  mix( _v0, _v1, gl_TessCoord.y);
    fginfo.uv = getUV(tessPos.xyz,minVal,maxVal);
    float h = getHeight(fginfo.uv);
    tessPos = tessPos + vec4(0,h,0,0);
    fginfo.pos = tessPos.xyz;
    fginfo.uv = getUV(tessPos.xyz,minVal,maxVal);

    vec3 v0 = tessPos.xyz;
    vec3 v1 = vec3(v0.x+EPS,0.0,v0.z);
    vec2 uv1 = getUV(v1,minVal,maxVal);
    v1.y = getHeight(uv1);
    uv1 = getUV(v1,minVal,maxVal);

    vec3 v2 = vec3(v0.x,0.0,v0.z+EPS);
    vec2 uv2 = getUV(v2,minVal,maxVal);
    v2.y = getHeight(uv2);
    uv2 = getUV(v2,minVal,maxVal);

    vec3 e1 = v1-v0;
    vec3 e2 = v2-v0;

    vec2 duv1 = uv1-fginfo.uv;  
    vec2 duv2 = uv2-fginfo.uv;

    float f = 1.0/(duv1.x*duv2.y-duv1.y*duv2.x);
    vec3 tan = f*(duv2.y*e1-duv1.y*e2);
    vec3 bitan = f*(-duv2.x*e1+duv1.x*e2);
    tan = normalize(tan);
    bitan = normalize(bitan);
    tan = normalize(tan-dot(tan,bitan)*bitan);
    vec3 normal = -normalize(cross(tan,bitan));

    fginfo.TBN = mat3(tan,bitan,normal);

    gl_Position = projection * view * tessPos;
    fginfo.lightSpacePos = lightSpaceMat * tessPos;
}